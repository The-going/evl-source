From 34d4dff4a26a18afe6196f2a0e3ef2cc6878f6b8 Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Tue, 8 Oct 2019 14:55:54 +0200
Subject: [PATCH] evl/wait: fold wait list into wchan

---
 include/evl/wait.h | 22 +++++++++++-----------
 kernel/evl/wait.c  | 12 ++++++------
 2 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/include/evl/wait.h b/include/evl/wait.h
index 78560af8b2ad..89cd86910cf6 100644
--- a/include/evl/wait.h
+++ b/include/evl/wait.h
@@ -24,31 +24,31 @@
 
 struct evl_wait_queue {
 	int flags;
-	struct list_head wait_list;
 	struct evl_clock *clock;
 	struct evl_wait_channel wchan;
 };
 
 #define EVL_WAIT_INITIALIZER(__name) {					\
 		.flags = EVL_WAIT_PRIO,					\
-		.wait_list = LIST_HEAD_INIT((__name).wait_list), 	\
 		.clock = &evl_mono_clock,				\
 		.wchan = {						\
 			.abort_wait = evl_abort_wait,			\
 			.reorder_wait = evl_reorder_wait,		\
+			.wait_list = LIST_HEAD_INIT((__name).wchan.wait_list), \
 			.lock = __HARD_SPIN_LOCK_INITIALIZER((__name).wchan.lock), \
 		},							\
 	}
 
-#define evl_head_waiter(__wq)				\
-	list_first_entry_or_null(&(__wq)->wait_list,	\
+#define evl_head_waiter(__wq)						\
+	list_first_entry_or_null(&(__wq)->wchan.wait_list,		\
 				struct evl_thread, wait_next)
 
-#define evl_for_each_waiter(__pos, __wq)	\
-	list_for_each_entry(__pos, &(__wq)->wait_list, wait_next)
+#define evl_for_each_waiter(__pos, __wq)				\
+	list_for_each_entry(__pos, &(__wq)->wchan.wait_list, wait_next)
 
-#define evl_for_each_waiter_safe(__pos, __tmp, __wq)		\
-	list_for_each_entry_safe(__pos, __tmp, &(__wq)->wait_list, wait_next)
+#define evl_for_each_waiter_safe(__pos, __tmp, __wq)			\
+	list_for_each_entry_safe(__pos, __tmp,				\
+				&(__wq)->wchan.wait_list, wait_next)
 
 #define evl_wait_timeout(__wq, __timeout, __timeout_mode)		\
 ({									\
@@ -111,13 +111,13 @@ void evl_add_wait_queue(struct evl_wait_queue *wq,
 
 static inline bool evl_wait_active(struct evl_wait_queue *wq)
 {
-	return !list_empty(&wq->wait_list);
+	return !list_empty(&wq->wchan.wait_list);
 }
 
 static inline
 struct evl_thread *evl_wait_head(struct evl_wait_queue *wq)
 {
-	return list_first_entry_or_null(&wq->wait_list,
+	return list_first_entry_or_null(&wq->wchan.wait_list,
 					struct evl_thread, wait_next);
 }
 
@@ -144,7 +144,7 @@ void evl_flush_wait_locked(struct evl_wait_queue *wq, int reason)
 
 	trace_evl_flush_wait(wq);
 
-	list_for_each_entry_safe(waiter, tmp, &wq->wait_list, wait_next)
+	list_for_each_entry_safe(waiter, tmp, &wq->wchan.wait_list, wait_next)
 		evl_wakeup_thread(waiter, T_PEND, reason);
 }
 
diff --git a/kernel/evl/wait.c b/kernel/evl/wait.c
index 3665a4edbb46..be49026b27bf 100644
--- a/kernel/evl/wait.c
+++ b/kernel/evl/wait.c
@@ -17,9 +17,9 @@ void evl_init_wait(struct evl_wait_queue *wq,
 {
 	wq->flags = flags;
 	wq->clock = clock;
-	INIT_LIST_HEAD(&wq->wait_list);
 	wq->wchan.abort_wait = evl_abort_wait;
 	wq->wchan.reorder_wait = evl_reorder_wait;
+	INIT_LIST_HEAD(&wq->wchan.wait_list);
 	raw_spin_lock_init(&wq->wchan.lock);
 }
 EXPORT_SYMBOL_GPL(evl_init_wait);
@@ -44,9 +44,9 @@ void evl_add_wait_queue(struct evl_wait_queue *wq, ktime_t timeout,
 		evl_signal_thread(curr, SIGDEBUG, SIGDEBUG_MUTEX_SLEEP);
 
 	if (!(wq->flags & EVL_WAIT_PRIO))
-		list_add_tail(&curr->wait_next, &wq->wait_list);
+		list_add_tail(&curr->wait_next, &wq->wchan.wait_list);
 	else
-		list_add_priff(curr, &wq->wait_list, wprio, wait_next);
+		list_add_priff(curr, &wq->wchan.wait_list, wprio, wait_next);
 
 	evl_sleep_on(timeout, timeout_mode, wq->clock, &wq->wchan);
 }
@@ -58,11 +58,11 @@ struct evl_thread *evl_wake_up(struct evl_wait_queue *wq,
 {
 	trace_evl_wake_up(wq);
 
-	if (list_empty(&wq->wait_list))
+	if (list_empty(&wq->wchan.wait_list))
 		waiter = NULL;
 	else {
 		if (waiter == NULL)
-			waiter = list_first_entry(&wq->wait_list,
+			waiter = list_first_entry(&wq->wchan.wait_list,
 						struct evl_thread, wait_next);
 		evl_wakeup_thread(waiter, T_PEND, 0);
 	}
@@ -84,7 +84,7 @@ void evl_reorder_wait(struct evl_thread *thread)
 
 	if (wq->flags & EVL_WAIT_PRIO) {
 		list_del(&thread->wait_next);
-		list_add_priff(thread, &wq->wait_list, wprio, wait_next);
+		list_add_priff(thread, &wq->wchan.wait_list, wprio, wait_next);
 	}
 }
 EXPORT_SYMBOL_GPL(evl_reorder_wait);
-- 
2.16.4

