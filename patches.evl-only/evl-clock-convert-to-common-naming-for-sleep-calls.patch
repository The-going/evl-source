From f9e3329623b9ba7e2c5bd0f4ee11607c9dfd48a8 Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Fri, 8 Feb 2019 18:24:04 +0100
Subject: [PATCH] evl/clock: convert to common naming for sleep calls

---
 include/uapi/evenless/clock.h |  4 ++--
 kernel/evenless/clock.c       | 18 +++++++++---------
 2 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/include/uapi/evenless/clock.h b/include/uapi/evenless/clock.h
index e06ac3a7f97..ecc571c756b 100644
--- a/include/uapi/evenless/clock.h
+++ b/include/uapi/evenless/clock.h
@@ -12,12 +12,12 @@
 
 #define EVL_CLOCK_IOCBASE	'c'
 
-struct evl_clock_delayreq {
+struct evl_clock_sleepreq {
 	struct timespec timeout;
 	struct timespec *remain;
 };
 
-#define EVL_CLKIOC_DELAY	_IOWR(EVL_CLOCK_IOCBASE, 0, struct evl_clock_delayreq)
+#define EVL_CLKIOC_SLEEP	_IOWR(EVL_CLOCK_IOCBASE, 0, struct evl_clock_sleepreq)
 #define EVL_CLKIOC_GET_RES	_IOR(EVL_CLOCK_IOCBASE, 1, struct timespec)
 #define EVL_CLKIOC_GET_TIME	_IOR(EVL_CLOCK_IOCBASE, 2, struct timespec)
 #define EVL_CLKIOC_SET_TIME	_IOR(EVL_CLOCK_IOCBASE, 3, struct timespec)
diff --git a/kernel/evenless/clock.c b/kernel/evenless/clock.c
index 7ffb566e076..e7d5e19cdcc 100644
--- a/kernel/evenless/clock.c
+++ b/kernel/evenless/clock.c
@@ -418,16 +418,16 @@ struct evl_clock *evl_get_clock_by_fd(int efd)
 	return clock;
 }
 
-static long restart_clock_delay(struct restart_block *param)
+static long restart_clock_sleep(struct restart_block *param)
 {
 	return -EINVAL;
 }
 
-static int clock_delay(struct evl_clock *clock,
-		struct evl_clock_delayreq __user *u_req)
+static int clock_sleep(struct evl_clock *clock,
+		struct evl_clock_sleepreq __user *u_req)
 {
 	struct evl_thread *curr = evl_current();
-	struct evl_clock_delayreq req;
+	struct evl_clock_sleepreq req;
 	struct restart_block *restart;
 	struct timespec remain;
 	ktime_t timeout, rem;
@@ -446,7 +446,7 @@ static int clock_delay(struct evl_clock *clock,
 	if (curr->local_info & T_SYSRST) {
 		curr->local_info &= ~T_SYSRST;
 		restart = &current->restart_block;
-		if (restart->fn != restart_clock_delay) {
+		if (restart->fn != restart_clock_sleep) {
 			if (req.remain) {
 				rem = evl_get_stopped_timer_delta(&curr->rtimer);
 				remain = ktime_to_timespec(rem);
@@ -468,7 +468,7 @@ static int clock_delay(struct evl_clock *clock,
 	if (signal_pending(current)) {
 		restart = &current->restart_block;
 		restart->nanosleep.expires = timeout;
-		restart->fn = restart_clock_delay;
+		restart->fn = restart_clock_sleep;
 		curr->local_info |= T_SYSRST;
 		return -ERESTARTSYS;
 	}
@@ -567,9 +567,9 @@ static long clock_oob_ioctl(struct file *filp, unsigned int cmd,
 	int ret;
 
 	switch (cmd) {
-	case EVL_CLKIOC_DELAY:
-		ret = clock_delay(clock,
-				(struct evl_clock_delayreq __user *)arg);
+	case EVL_CLKIOC_SLEEP:
+		ret = clock_sleep(clock,
+				(struct evl_clock_sleepreq __user *)arg);
 		break;
 	default:
 		ret = clock_common_ioctl(clock, cmd, arg);
-- 
2.16.4

