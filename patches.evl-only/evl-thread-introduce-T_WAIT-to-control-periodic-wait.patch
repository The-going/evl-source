From 51613d5dc93d9a231acce1b2bbe721c8290d821e Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Sun, 3 Feb 2019 10:37:45 +0100
Subject: [PATCH] evl/thread: introduce T_WAIT to control periodic wait

---
 include/evenless/thread.h      |  2 +-
 include/uapi/evenless/thread.h | 33 +++++++++++++++++----------------
 kernel/evenless/thread.c       | 20 ++++++++------------
 3 files changed, 26 insertions(+), 29 deletions(-)

diff --git a/include/evenless/thread.h b/include/evenless/thread.h
index 37b7df96693..f571ab23c83 100644
--- a/include/evenless/thread.h
+++ b/include/evenless/thread.h
@@ -25,7 +25,7 @@
 #include <uapi/evenless/sched.h>
 #include <asm/evenless/thread.h>
 
-#define EVL_THREAD_BLOCK_BITS   (T_SUSP|T_PEND|T_DELAY|T_DORMANT|T_INBAND|T_HALT)
+#define EVL_THREAD_BLOCK_BITS   (T_SUSP|T_PEND|T_DELAY|T_WAIT|T_DORMANT|T_INBAND|T_HALT)
 #define EVL_THREAD_INFO_MASK	(T_RMID|T_TIMEO|T_BREAK|T_WAKEN|T_ROBBED|T_KICKED)
 
 struct evl_thread;
diff --git a/include/uapi/evenless/thread.h b/include/uapi/evenless/thread.h
index 51c499b024c..52486524f3c 100644
--- a/include/uapi/evenless/thread.h
+++ b/include/uapi/evenless/thread.h
@@ -12,22 +12,23 @@
 
 /* State flags (shared) */
 
-#define T_SUSP    0x00000001 /*< Suspended. */
-#define T_PEND    0x00000002 /*< Sleep-wait for a resource. */
-#define T_DELAY   0x00000004 /*< Delayed */
-#define T_READY   0x00000008 /*< Linked to the ready queue. */
-#define T_DORMANT 0x00000010 /*< Not started yet */
-#define T_ZOMBIE  0x00000020 /*< Zombie thread in deletion process */
-#define T_INBAND  0x00000040 /*< Thread is running in-band */
-#define T_HALT    0x00000080 /*< Thread is halted. */
-#define T_BOOST   0x00000100 /*< PI/PP boost undergoing */
-#define T_SSTEP   0x00000200 /*< Single-stepped by debugger */
-#define T_RRB     0x00000400 /*< Undergoes a round-robin scheduling */
-#define T_WARN    0x00000800 /*< Issue SIGDEBUG on error detection */
-#define T_ROOT    0x00001000 /*< Root thread (in-band context placeholder) */
-#define T_WEAK    0x00002000 /*< Weak scheduling (non real-time) */
-#define T_USER    0x00004000 /*< Userland thread */
-#define T_DEBUG   0x00008000 /*< User-level debugging enabled */
+#define T_SUSP    0x00000001 /*< Suspended */
+#define T_PEND    0x00000002 /*< Sleeping on a wait_queue/mutex */
+#define T_DELAY   0x00000004 /*< Delayed/timed */
+#define T_WAIT    0x00000008 /*< Periodic wait */
+#define T_READY   0x00000010 /*< Ready to run (in rq) */
+#define T_DORMANT 0x00000020 /*< Not started yet */
+#define T_ZOMBIE  0x00000040 /*< Dead, waiting for cleanup */
+#define T_INBAND  0x00000080 /*< Running in-band */
+#define T_HALT    0x00000100 /*< Halted */
+#define T_BOOST   0x00000200 /*< PI/PP boost undergoing */
+#define T_SSTEP   0x00000400 /*< Single-stepped by debugger */
+#define T_RRB     0x00000800 /*< Undergoes a round-robin scheduling */
+#define T_WARN    0x00001000 /*< Wants SIGDEBUG on error detection */
+#define T_ROOT    0x00002000 /*< Root thread (in-band context placeholder) */
+#define T_WEAK    0x00004000 /*< Weak scheduling (non real-time) */
+#define T_USER    0x00008000 /*< Userland thread */
+#define T_DEBUG   0x00010000 /*< User-level debugging enabled */
 
 /* Information flags (shared) */
 
diff --git a/kernel/evenless/thread.c b/kernel/evenless/thread.c
index c8c67a2c020..1c505bd4be6 100644
--- a/kernel/evenless/thread.c
+++ b/kernel/evenless/thread.c
@@ -55,16 +55,9 @@ static void periodic_handler(struct evl_timer *timer) /* hard irqs off */
 	struct evl_thread *thread =
 		container_of(timer, struct evl_thread, ptimer);
 
+	evl_wakeup_thread(thread, T_WAIT);
 	xnlock_get(&nklock);
-	/*
-	 * Prevent unwanted round-robin, and do not wake up threads
-	 * blocked on a resource.
-	 */
-	if ((thread->state & (T_DELAY|T_PEND)) == T_DELAY)
-		evl_wakeup_thread(thread, T_DELAY);
-
 	evl_set_timer_rq(&thread->ptimer, evl_thread_rq(thread));
-
 	xnlock_put(&nklock);
 }
 
@@ -498,8 +491,10 @@ void evl_sleep_on(ktime_t timeout, enum evl_tmode timeout_mode,
 	}
 
 	/*
-	 * If a zero relative delay was given, we want to sleep
-	 * indefinitely. Otherwise, set up a timer.
+	 * wchan + timeout: timed wait for a resource (T_PEND|T_DELAY)
+	 * wchan + !timeout: unbounded sleep on resource (T_PEND)
+	 * !wchan + timeout: timed sleep (T_DELAY)
+	 * !wchan + !timeout: periodic wait (T_WAIT)
 	 */
 	if (timeout_mode != EVL_REL || !timeout_infinite(timeout)) {
 		evl_prepare_timer_wait(&curr->rtimer, clock,
@@ -508,7 +503,8 @@ void evl_sleep_on(ktime_t timeout, enum evl_tmode timeout_mode,
 			timeout = evl_abs_timeout(&curr->rtimer, timeout);
 		evl_start_timer(&curr->rtimer, timeout, EVL_INFINITE);
 		curr->state |= T_DELAY;
-	}
+	} else if (!wchan)
+		curr->state |= T_WAIT;
 
 	if (oldstate & T_READY) {
 		evl_dequeue_thread(curr);
@@ -531,7 +527,7 @@ void evl_wakeup_thread(struct evl_thread *thread, int mask)
 	unsigned long oldstate, flags;
 	struct evl_rq *rq;
 
-	if (EVL_WARN_ON(CORE, mask & ~(T_DELAY|T_PEND)))
+	if (EVL_WARN_ON(CORE, mask & ~(T_DELAY|T_PEND|T_WAIT)))
 		return;
 
 	xnlock_get_irqsave(&nklock, flags);
-- 
2.16.4

