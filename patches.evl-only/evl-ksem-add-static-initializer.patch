From 6870545855d5815ae0081a795828a8c176215848 Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Sun, 17 Mar 2019 15:51:27 +0100
Subject: [PATCH] evl/ksem: add static initializer

---
 include/evl/sem.h | 21 +++++++++++++++++----
 kernel/evl/sem.c  | 19 +++----------------
 2 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/include/evl/sem.h b/include/evl/sem.h
index 11b82e9f809..99bec2d587f 100644
--- a/include/evl/sem.h
+++ b/include/evl/sem.h
@@ -11,14 +11,27 @@
 #include <evl/wait.h>
 
 struct evl_ksem {
+	struct evl_wait_queue wait;
 	unsigned int value;
-	struct evl_wait_queue wait_queue;
 };
 
-void evl_init_ksem(struct evl_ksem *ksem,
-		unsigned int value);
+#define EVL_KSEM_INITIALIZER(__name, __value) {			\
+		.wait = EVL_WAIT_INITIALIZER((__name).wait),	\
+		.value = (__value),				\
+	}
 
-void evl_destroy_ksem(struct evl_ksem *ksem);
+#define DEFINE_EVL_KSEM(__name, __value)			\
+	struct evl_ksem __name = EVL_KSEM_INITIALIZER(__name, __value)
+
+static inline void evl_init_ksem(struct evl_ksem *ksem, unsigned int value)
+{
+	*ksem = (struct evl_ksem)EVL_KSEM_INITIALIZER(*ksem, value);
+}
+
+static inline void evl_destroy_ksem(struct evl_ksem *ksem)
+{
+	evl_destroy_wait(&ksem->wait);
+}
 
 int evl_down_timeout(struct evl_ksem *ksem,
 		ktime_t timeout);
diff --git a/kernel/evl/sem.c b/kernel/evl/sem.c
index 10f316575d1..43c7b38d865 100644
--- a/kernel/evl/sem.c
+++ b/kernel/evl/sem.c
@@ -10,19 +10,6 @@
 #include <evl/sched.h>
 #include <evl/sem.h>
 
-void evl_init_ksem(struct evl_ksem *ksem, unsigned int value)
-{
-	ksem->value = value;
-	evl_init_wait(&ksem->wait_queue, &evl_mono_clock, EVL_WAIT_PRIO);
-}
-EXPORT_SYMBOL_GPL(evl_init_ksem);
-
-void evl_destroy_ksem(struct evl_ksem *ksem)
-{
-	evl_destroy_wait(&ksem->wait_queue);
-}
-EXPORT_SYMBOL_GPL(evl_destroy_ksem);
-
 static bool down_ksem(struct evl_ksem *ksem)
 {
 	if (ksem->value > 0) {
@@ -35,14 +22,14 @@ static bool down_ksem(struct evl_ksem *ksem)
 
 int evl_down_timeout(struct evl_ksem *ksem, ktime_t timeout)
 {
-	return evl_wait_event_timeout(&ksem->wait_queue, timeout,
+	return evl_wait_event_timeout(&ksem->wait, timeout,
 				EVL_ABS, down_ksem(ksem));
 }
 EXPORT_SYMBOL_GPL(evl_down_timeout);
 
 int evl_down(struct evl_ksem *ksem)
 {
-	return evl_wait_event_timeout(&ksem->wait_queue, EVL_INFINITE,
+	return evl_wait_event_timeout(&ksem->wait, EVL_INFINITE,
 				EVL_REL, down_ksem(ksem));
 }
 EXPORT_SYMBOL_GPL(evl_down);
@@ -66,7 +53,7 @@ void evl_up(struct evl_ksem *ksem)
 
 	xnlock_get_irqsave(&nklock, flags);
 
-	if (!evl_wake_up_head(&ksem->wait_queue))
+	if (!evl_wake_up_head(&ksem->wait))
 		ksem->value++;
 
 	xnlock_put_irqrestore(&nklock, flags);
-- 
2.16.4

