From 951c5309d4bf28fb645611ec38fdf5ff631583e1 Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Thu, 13 Feb 2020 15:14:31 +0100
Subject: [PATCH] ptrace: dovetail: trigger PTSTEP, PTSTOP and PTCONT events

Inform the companion kernel about the following events, so that the
alternate scheduler can hook to the ptracing logic:

- ptracer is resuming the tracee in stepping mode
- tracee is about to sleep in ptrace_stop()
- tracee is resuming from ptrace_stop()

Signed-off-by: Philippe Gerum <rpm@xenomai.org>
---
 include/linux/dovetail.h | 27 +++++++++++++++++++++++++++
 kernel/ptrace.c          |  2 ++
 kernel/signal.c          |  4 ++++
 3 files changed, 33 insertions(+)

diff --git a/include/linux/dovetail.h b/include/linux/dovetail.h
index aef0492bd9ae..80edb4ef3281 100644
--- a/include/linux/dovetail.h
+++ b/include/linux/dovetail.h
@@ -24,6 +24,9 @@ enum inband_event_type {
 	INBAND_TASK_MIGRATION,
 	INBAND_TASK_EXIT,
 	INBAND_TASK_RETUSER,
+	INBAND_TASK_PTSTEP,
+	INBAND_TASK_PTSTOP,
+	INBAND_TASK_PTCONT,
 	INBAND_PROCESS_CLEANUP,
 };
 
@@ -91,6 +94,24 @@ static inline void inband_cleanup_notify(struct mm_struct *mm)
 	inband_event_notify(INBAND_PROCESS_CLEANUP, mm);
 }
 
+static inline void inband_ptstop_notify(void)
+{
+	if (test_thread_local_flags(_TLF_DOVETAIL))
+		inband_event_notify(INBAND_TASK_PTSTOP, current);
+}
+
+static inline void inband_ptcont_notify(void)
+{
+	if (test_thread_local_flags(_TLF_DOVETAIL))
+		inband_event_notify(INBAND_TASK_PTCONT, current);
+}
+
+static inline void inband_ptstep_notify(struct task_struct *tracee)
+{
+	if (test_ti_local_flags(task_thread_info(tracee), _TLF_DOVETAIL))
+		inband_event_notify(INBAND_TASK_PTSTEP, tracee);
+}
+
 static inline
 void prepare_inband_switch(struct task_struct *next)
 {
@@ -253,6 +274,12 @@ static inline void inband_cleanup_notify(struct mm_struct *mm) { }
 
 static inline void inband_retuser_notify(void) { }
 
+static inline void inband_ptstop_notify(void) { }
+
+static inline void inband_ptcont_notify(void) { }
+
+static inline void inband_ptstep_notify(struct task_struct *tracee) { }
+
 static inline void oob_trampoline(void) { }
 
 static inline void prepare_inband_switch(struct task_struct *next) { }
diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index 43d6179508d6..902be48010cb 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -827,10 +827,12 @@ static int ptrace_resume(struct task_struct *child, long request,
 		if (unlikely(!arch_has_block_step()))
 			return -EIO;
 		user_enable_block_step(child);
+		inband_ptstep_notify(child);
 	} else if (is_singlestep(request) || is_sysemu_singlestep(request)) {
 		if (unlikely(!arch_has_single_step()))
 			return -EIO;
 		user_enable_single_step(child);
+		inband_ptstep_notify(child);
 	} else {
 		user_disable_single_step(child);
 	}
diff --git a/kernel/signal.c b/kernel/signal.c
index 560efa95e0e0..57223c538845 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -2144,6 +2144,8 @@ static void ptrace_stop(int exit_code, int why, int clear_code, kernel_siginfo_t
 			return;
 	}
 
+	inband_ptstop_notify();
+
 	set_special_state(TASK_TRACED);
 
 	/*
@@ -2237,6 +2239,8 @@ static void ptrace_stop(int exit_code, int why, int clear_code, kernel_siginfo_t
 		read_unlock(&tasklist_lock);
 	}
 
+	inband_ptcont_notify();
+
 	/*
 	 * We are back.  Now reacquire the siglock before touching
 	 * last_siginfo, so that we are sure to have synchronized with
-- 
2.16.4

