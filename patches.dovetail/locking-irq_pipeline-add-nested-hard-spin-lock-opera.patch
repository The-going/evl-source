From ef465c2d750dc99124f6e9bc6f9c134aaef356f5 Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Sat, 2 Nov 2019 10:43:59 +0100
Subject: [PATCH] locking: irq_pipeline: add nested hard spin lock operation

Signed-off-by: Philippe Gerum <rpm@xenomai.org>
---
 include/linux/spinlock.h          |  9 ++++++---
 include/linux/spinlock_pipeline.h | 31 +++++++++++++++++++++++++++----
 2 files changed, 33 insertions(+), 7 deletions(-)

diff --git a/include/linux/spinlock.h b/include/linux/spinlock.h
index ffac75208f1a..459f21773192 100644
--- a/include/linux/spinlock.h
+++ b/include/linux/spinlock.h
@@ -233,8 +233,10 @@ static inline void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock)
 	LOCK_ALTERNATIVES(lock, spin_lock, _raw_spin_lock(__RAWLOCK(lock)))
 
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
+
 # define raw_spin_lock_nested(lock, subclass) \
-	_raw_spin_lock_nested(lock, subclass)
+	LOCK_ALTERNATIVES(lock, spin_lock_nested, \
+		_raw_spin_lock_nested(__RAWLOCK(lock), subclass), subclass)
 
 # define raw_spin_lock_nest_lock(lock, nest_lock)			\
 	 do {								\
@@ -247,8 +249,9 @@ static inline void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock)
  * warns about set-but-not-used variables when building with
  * CONFIG_DEBUG_LOCK_ALLOC=n and with W=1.
  */
-# define raw_spin_lock_nested(lock, subclass)		\
-	_raw_spin_lock(((void)(subclass), (lock)))
+# define raw_spin_lock_nested(lock, subclass)	\
+	LOCK_ALTERNATIVES(lock, spin_lock_nested, \
+		_raw_spin_lock(((void)(subclass), __RAWLOCK(lock))), subclass)
 # define raw_spin_lock_nest_lock(lock, nest_lock)	_raw_spin_lock(lock)
 #endif
 
diff --git a/include/linux/spinlock_pipeline.h b/include/linux/spinlock_pipeline.h
index 75a915531255..f5c15da33b81 100644
--- a/include/linux/spinlock_pipeline.h
+++ b/include/linux/spinlock_pipeline.h
@@ -38,6 +38,15 @@
 			do_raw_spin_lock(__rlock);			\
 	} while (0)
 
+#define hard_lock_acquire_nested(__rlock, __subclass, __ip)		\
+	do {								\
+		if (irq_pipeline_debug_locking()) {			\
+			spin_acquire(&(__rlock)->dep_map, __subclass, 0, __ip); \
+			LOCK_CONTENDED(__rlock, do_raw_spin_trylock, do_raw_spin_lock); \
+		} else							\
+			do_raw_spin_lock(__rlock);			\
+	} while (0)
+
 #define hard_trylock_acquire(__rlock, __try, __ip)			\
 	do {								\
 		if (irq_pipeline_debug_locking())			\
@@ -47,7 +56,8 @@
 #define hard_lock_release(__rlock, __ip)				\
 	do {								\
 		if (irq_pipeline_debug_locking())			\
-			spin_release(&(__rlock)->dep_map, 1, __ip);	\
+			spin_release(&(__rlock)->dep_map, __ip);	\
+		do_raw_spin_unlock(__rlock);				\
 	} while (0)
 
 #if defined(CONFIG_SMP) || defined(CONFIG_DEBUG_SPINLOCK)
@@ -73,11 +83,24 @@ void hard_spin_lock(struct raw_spinlock *rlock)
 	hard_lock_acquire(rlock, 0, _THIS_IP_);
 }
 
+#ifdef CONFIG_DEBUG_LOCK_ALLOC
+static inline
+void hard_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
+{
+	hard_lock_acquire_nested(rlock, subclass, _THIS_IP_);
+}
+#else
+static inline
+void hard_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
+{
+	hard_spin_lock(rlock);
+}
+#endif
+
 static inline
 void hard_spin_unlock(struct raw_spinlock *rlock)
 {
 	hard_lock_release(rlock, _THIS_IP_);
-	do_raw_spin_unlock(rlock);
 }
 
 static inline
@@ -91,7 +114,6 @@ static inline
 void hard_spin_unlock_irq(struct raw_spinlock *rlock)
 {
 	hard_lock_release(rlock, _THIS_IP_);
-	do_raw_spin_unlock(rlock);
 	hard_local_irq_enable();
 }
 
@@ -100,7 +122,6 @@ void hard_spin_unlock_irqrestore(struct raw_spinlock *rlock,
 				 unsigned long flags)
 {
 	hard_lock_release(rlock, _THIS_IP_);
-	do_raw_spin_unlock(rlock);
 	hard_local_irq_restore(flags);
 }
 
@@ -162,6 +183,8 @@ int hard_spin_is_contended(struct raw_spinlock *rlock)
 
 #define hard_spin_lock_init(__rlock)	do { (void)(__rlock); } while (0)
 #define hard_spin_lock(__rlock)		__HARD_LOCK(__rlock)
+#define hard_spin_lock_nested(__rlock, __subclass)  \
+	do { __HARD_LOCK(__rlock); (void)(__subclass); } while (0)
 #define hard_spin_unlock(__rlock)	__HARD_UNLOCK(__rlock)
 #define hard_spin_lock_irq(__rlock)	__HARD_LOCK_IRQ(__rlock)
 #define hard_spin_unlock_irq(__rlock)	__HARD_UNLOCK_IRQ(__rlock)
-- 
2.16.4

