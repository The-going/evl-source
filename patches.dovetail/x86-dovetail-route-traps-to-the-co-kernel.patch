From 7a42a73052f7e2f171a98c514f88d719abb59fcb Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Mon, 6 May 2019 17:59:42 +0200
Subject: [PATCH] x86: dovetail: route traps to the co-kernel

---
 arch/x86/include/asm/irq_pipeline.h |  4 ++--
 arch/x86/kernel/traps.c             | 18 ++++++++++--------
 arch/x86/mm/fault.c                 |  2 +-
 3 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/arch/x86/include/asm/irq_pipeline.h b/arch/x86/include/asm/irq_pipeline.h
index 314704565141..f4ae6d9c3b20 100644
--- a/arch/x86/include/asm/irq_pipeline.h
+++ b/arch/x86/include/asm/irq_pipeline.h
@@ -88,7 +88,7 @@ static inline int arch_enable_oob_stage(void)
 	return 0;
 }
 
-unsigned long pipelined_fault_entry(struct pt_regs *regs);
+unsigned long pipelined_fault_entry(int trapnr, struct pt_regs *regs);
 
 void pipelined_fault_exit(unsigned long combo);
 
@@ -127,7 +127,7 @@ static inline notrace unsigned long arch_local_irq_save(void)
 }
 
 static inline
-unsigned long pipelined_fault_entry(struct pt_regs *regs)
+unsigned long pipelined_fault_entry(int trapnr, struct pt_regs *regs)
 {
 	return 0;
 }
diff --git a/arch/x86/kernel/traps.c b/arch/x86/kernel/traps.c
index 5279d6438f99..675d81858e8f 100644
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -76,11 +76,13 @@ DECLARE_BITMAP(system_vectors, NR_VECTORS);
 
 #ifdef CONFIG_IRQ_PIPELINE
 
-unsigned long pipelined_fault_entry(struct pt_regs *regs)
+unsigned long pipelined_fault_entry(int trapnr, struct pt_regs *regs)
 {
 	unsigned long flags;
 	int nosync = 1;
 
+	oob_trap_notify(trapnr, regs);
+
 	flags = hard_local_irq_save();
 
 	if (hard_irqs_disabled_flags(flags))
@@ -303,7 +305,7 @@ static void do_error_trap(struct pt_regs *regs, long error_code, char *str,
 {
 	unsigned long flags;
 
-	flags = pipelined_fault_entry(regs);
+	flags = pipelined_fault_entry(trapnr, regs);
 
 	RCU_LOCKDEP_WARN(!rcu_is_watching(), "entry code didn't wake RCU");
 
@@ -478,7 +480,7 @@ dotraplinkage void do_bounds(struct pt_regs *regs, long error_code)
 	const struct mpx_bndcsr *bndcsr;
 	unsigned long flags;
 
-	flags = pipelined_fault_entry(regs);
+	flags = pipelined_fault_entry(X86_TRAP_BR, regs);
 
 	RCU_LOCKDEP_WARN(!rcu_is_watching(), "entry code didn't wake RCU");
 	if (notify_die(DIE_TRAP, "bounds", regs, error_code,
@@ -574,7 +576,7 @@ do_general_protection(struct pt_regs *regs, long error_code)
 	RCU_LOCKDEP_WARN(!rcu_is_watching(), "entry code didn't wake RCU");
 	cond_local_irq_enable(regs);
 
-	flags = pipelined_fault_entry(regs);
+	flags = pipelined_fault_entry(X86_TRAP_GP, regs);
 
 	if (static_cpu_has(X86_FEATURE_UMIP)) {
 		if (user_mode(regs) && fixup_umip_exception(regs))
@@ -625,7 +627,7 @@ dotraplinkage void notrace do_int3(struct pt_regs *regs, long error_code)
 {
 	unsigned long flags;
 
-	flags = pipelined_fault_entry(regs);
+	flags = pipelined_fault_entry(X86_TRAP_BP, regs);
 
 #ifdef CONFIG_DYNAMIC_FTRACE
 	/*
@@ -828,7 +830,7 @@ dotraplinkage void do_debug(struct pt_regs *regs, long error_code)
 		goto exit;
 #endif
 
-	flags = pipelined_fault_entry(regs);
+	flags = pipelined_fault_entry(X86_TRAP_DB, regs);
 
 	if (notify_die(DIE_DEBUG, "debug", regs, (long)&dr6, error_code,
 							SIGTRAP) == NOTIFY_STOP)
@@ -889,7 +891,7 @@ static void math_error(struct pt_regs *regs, int error_code, int trapnr)
 	char *str = (trapnr == X86_TRAP_MF) ? "fpu exception" :
 						"simd exception";
 
-	flags = pipelined_fault_entry(regs);
+	flags = pipelined_fault_entry(trapnr, regs);
 
 	cond_local_irq_enable(regs);
 
@@ -955,7 +957,7 @@ do_device_not_available(struct pt_regs *regs, long error_code)
 	if (!boot_cpu_has(X86_FEATURE_FPU) && (cr0 & X86_CR0_EM)) {
 		struct math_emu_info info = { };
 
-		flags = pipelined_fault_entry(regs);
+		flags = pipelined_fault_entry(X86_TRAP_NM, regs);
 
 		cond_local_irq_enable(regs);
 
diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 697b91dd253e..1ea1a07cb698 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -1527,7 +1527,7 @@ do_page_fault(struct pt_regs *regs, unsigned long error_code, unsigned long addr
 	enum ctx_state prev_state;
 	unsigned long flags;
 
-	flags = pipelined_fault_entry(regs);
+	flags = pipelined_fault_entry(X86_TRAP_PF, regs);
 
 	prev_state = exception_enter();
 	trace_page_fault_entries(regs, error_code, address);
-- 
2.16.4

