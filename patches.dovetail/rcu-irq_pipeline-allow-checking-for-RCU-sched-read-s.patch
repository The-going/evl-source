From 8117dcd14bd8c7bf973107de263cd87ddb98abc1 Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Mon, 8 May 2017 15:31:22 +0200
Subject: [PATCH] rcu: irq_pipeline: allow checking for RCU-sched read-side
 from oob stage

Tracepoints check whether the traced code is within RCU-sched read
critical section. By definition, any code running over the head stage
can be considered to be in such a section on the current CPU, make
sure rcu_read_lock_sched_held() returns the right information.
---
 include/linux/rcupdate.h | 3 ++-
 kernel/rcu/update.c      | 3 +++
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/include/linux/rcupdate.h b/include/linux/rcupdate.h
index 75a2eded7aa2..b9026168286a 100644
--- a/include/linux/rcupdate.h
+++ b/include/linux/rcupdate.h
@@ -24,6 +24,7 @@
 #include <linux/compiler.h>
 #include <linux/atomic.h>
 #include <linux/irqflags.h>
+#include <linux/irqstage.h>
 #include <linux/preempt.h>
 #include <linux/bottom_half.h>
 #include <linux/lockdep.h>
@@ -240,7 +241,7 @@ static inline int rcu_read_lock_bh_held(void)
 
 static inline int rcu_read_lock_sched_held(void)
 {
-	return !preemptible();
+	return !running_inband() || !preemptible();
 }
 
 static inline int rcu_read_lock_any_held(void)
diff --git a/kernel/rcu/update.c b/kernel/rcu/update.c
index 1861103662db..74e09509a7ff 100644
--- a/kernel/rcu/update.c
+++ b/kernel/rcu/update.c
@@ -117,6 +117,9 @@ int rcu_read_lock_sched_held(void)
 {
 	bool ret;
 
+	if (irqs_pipelined() &&
+	    (hard_irqs_disabled() || !running_inband()))
+		return true;
 	if (rcu_read_lock_held_common(&ret))
 		return ret;
 	return lock_is_held(&rcu_sched_lock_map) || !preemptible();
-- 
2.16.4

