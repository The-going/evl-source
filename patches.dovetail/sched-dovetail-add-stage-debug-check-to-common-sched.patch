From c387df07958f8c4aba75c83829520a655d41bb76 Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Thu, 21 Jul 2016 19:36:14 +0200
Subject: [PATCH] sched: dovetail: add stage debug check to common scheduling
 paths

Only code running over the in-band stage may reschedule, so checking
for the current stage in might_resched() can detect spurious calling
contexts early.

Likewise, all wake_up*() calls must be issued from the in-band stage,
so check the current stage from the common task wakeup helper too.

This code is compiled in with CONFIG_DEBUG_IRQ_PIPELINE.
---
 include/linux/kernel.h | 8 ++++++--
 kernel/sched/core.c    | 2 ++
 kernel/sched/wait.c    | 2 ++
 3 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index 8f0e68e250a..c06f24c7e56 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -13,6 +13,7 @@
 #include <linux/typecheck.h>
 #include <linux/printk.h>
 #include <linux/build_bug.h>
+#include <asm-generic/irq_pipeline.h>
 #include <asm/byteorder.h>
 #include <uapi/linux/kernel.h>
 
@@ -239,9 +240,12 @@ struct user;
 
 #ifdef CONFIG_PREEMPT_VOLUNTARY
 extern int _cond_resched(void);
-# define might_resched() _cond_resched()
+# define might_resched() do { \
+		check_inband_stage(); \
+		_cond_resched(); \
+	} while (0)
 #else
-# define might_resched() do { } while (0)
+# define might_resched() check_inband_stage()
 #endif
 
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 8abf28a03e7..5769e435ad2 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3298,6 +3298,8 @@ static inline void schedule_debug(struct task_struct *prev)
 		panic("corrupted stack end detected inside scheduler\n");
 #endif
 
+	check_inband_stage();
+
 	if (unlikely(in_atomic_preempt_off())) {
 		__schedule_bug(prev);
 		preempt_count_set(PREEMPT_DISABLED);
diff --git a/kernel/sched/wait.c b/kernel/sched/wait.c
index 6eb1f8efd22..4930d13f8d5 100644
--- a/kernel/sched/wait.c
+++ b/kernel/sched/wait.c
@@ -69,6 +69,8 @@ static int __wake_up_common(struct wait_queue_head *wq_head, unsigned int mode,
 	wait_queue_entry_t *curr, *next;
 	int cnt = 0;
 
+	check_inband_stage();
+
 	lockdep_assert_held(&wq_head->lock);
 
 	if (bookmark && (bookmark->flags & WQ_FLAG_BOOKMARK)) {
-- 
2.16.4

